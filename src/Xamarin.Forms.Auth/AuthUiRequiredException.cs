// Copyright (c) 2019 Glenn Watson. All rights reserved.
// Glenn Watson licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.

using System;
using System.Runtime.Serialization;

namespace Xamarin.Forms.Auth
{
    /// <summary>
    /// This exception class is to inform developers that UI interaction is required for authentication to
    /// succeed. It's thrown when calling <see cref="ClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{string}, IAccount)"/> or one
    /// of its overrides, and when the token does not exists in the cache, or the user needs to provide more content, or perform multiple factor authentication based
    /// on Azure AD policies, etc..
    /// </summary>
    [Serializable]
    public class AuthUiRequiredException : AuthServiceException
    {
        /// <summary>
        /// Standard OAuth2 protocol error code. It indicates to the libray that the application needs to expose the UI to the user
        /// so that the user does an interactive action in order to get a new token.
        /// <para>Mitigation.</para> If your application is a <see cref="T:PublicClientApplication"/> call one of the <c>AcquireTokenAsync</c> overrides to
        /// perform an interactive authentication. If your application is a <see cref="T:ConfidentialClientApplication"/> chances are that the Claims member
        /// of the exception is not empty. See <see cref="P:MsalServiceException.Claims"/> for the right mitigation.
        /// </summary>
        public const string InvalidGrantError = "invalid_grant";

#pragma warning disable CS1574 // XML comment has cref attribute that could not be resolved
        /// <summary>
        /// <para>Mitigation.</para> If your application is a <see cref="PublicClientApplication"/> call one of the <c>AcquireTokenAsync</c> overrides so
        /// that the user of your application signs-in and accepts consent. If your application is a <see cref="T:ConfidentialClientApplication"/>. If it's a Web App
        /// you should have previously called <see cref="ConfidentialClientApplication.AcquireTokenByAuthorizationCodeAsync(string, System.Collections.Generic.IEnumerable{string})"/>
        /// as described in https://aka.ms/msal-net-authorization-code. This error should not happen in Web APIs.
        /// </summary>
        public const string NoTokensFoundError = "no_tokens_found";
#pragma warning restore CS1574 // XML comment has cref attribute that could not be resolved

        /// <summary>
        /// This error code comes back from <see cref="ClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{string}, IAccount)"/> calls when a null user is
        /// passed as the <c>account</c> parameter.
        /// </summary>
        public const string UserNullError = "user_null";

        /// <summary>
        /// This error code comes back from <see cref="ClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{string}, IAccount)"/> calls when
        /// the user cache had not been set in the application constructor.
        /// </summary>
        public const string TokenCacheNullError = "token_cache_null";

        /// <summary>
        /// One of two conditions was encountered:
        /// <list type="bullet">
        /// <item><description>The <c>UIBehavior.Never</c> UI behavior was passed in an interactive token call, but the constraint could not be honored because user interaction is required,
        /// for instance because the user needs to re-sign-in, give consent for more scopes, or perform multiple factor authentication.
        /// </description></item>
        /// <item><description>
        /// An error occurred during a silent web authentication that prevented the authentication flow from completing in a short enough time frame.
        /// </description></item>
        /// </list>
        /// <para>Remediation.</para>call one of the <c>AcquireTokenAsync</c> overrides so that the user of your application signs-in and accepts consent.
        /// </summary>
        public const string NoPromptFailedError = "no_prompt_failed";

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUiRequiredException"/> class.
        /// </summary>
        /// <param name="errorCode">
        /// The error code returned by the service or generated by the client. This is the code you can rely on
        /// for exception handling.
        /// </param>
        /// <param name="errorMessage">The error message that explains the reason for the exception.</param>
        public AuthUiRequiredException(string errorCode, string errorMessage)
            : this(errorCode, errorMessage, null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUiRequiredException"/> class.
        /// </summary>
        /// <param name="errorCode">
        /// The error code returned by the service or generated by the client. This is the code you can rely on
        /// for exception handling.
        /// </param>
        /// <param name="errorMessage">The error message that explains the reason for the exception.</param>
        /// <param name="innerException">Represents the root cause of the exception.</param>
        public AuthUiRequiredException(string errorCode, string errorMessage, Exception innerException)
            : base(errorCode, errorMessage, innerException)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUiRequiredException"/> class.
        /// </summary>
        /// <param name="errorCode">
        /// The error code returned by the service or generated by the client. This is the code you can rely on
        /// for exception handling.
        /// </param>
        /// <param name="errorMessage">The error message that explains the reason for the exception.</param>
        /// <param name="statusCode">The status code.</param>
        public AuthUiRequiredException(string errorCode, string errorMessage, int statusCode)
            : base(errorCode, errorMessage, statusCode)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUiRequiredException"/> class.
        /// </summary>
        /// <param name="errorCode">
        /// The error code returned by the service or generated by the client. This is the code you can rely on
        /// for exception handling.
        /// </param>
        /// <param name="errorMessage">The error message that explains the reason for the exception.</param>
        /// <param name="statusCode">The status code.</param>
        /// <param name="innerException">Represents the root cause of the exception.</param>
        public AuthUiRequiredException(string errorCode, string errorMessage, int statusCode, Exception innerException)
            : base(errorCode, errorMessage, statusCode, innerException)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUiRequiredException"/> class.
        /// </summary>
        /// <param name="errorCode">
        /// The error code returned by the service or generated by the client. This is the code you can rely on
        /// for exception handling.
        /// </param>
        /// <param name="errorMessage">The error message that explains the reason for the exception.</param>
        /// <param name="statusCode">The status code.</param>
        /// <param name="claims">The attempted claims.</param>
        /// <param name="innerException">Represents the root cause of the exception.</param>
        public AuthUiRequiredException(string errorCode, string errorMessage, int statusCode, string claims, Exception innerException)
            : base(errorCode, errorMessage, statusCode, claims, innerException)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUiRequiredException"/> class.
        /// </summary>
        /// <param name="serializationInfo">The serialization information.</param>
        /// <param name="streamingContext">The serialization context.</param>
        protected AuthUiRequiredException(SerializationInfo serializationInfo, StreamingContext streamingContext)
            : base(serializationInfo, streamingContext)
        {
        }
    }
}
